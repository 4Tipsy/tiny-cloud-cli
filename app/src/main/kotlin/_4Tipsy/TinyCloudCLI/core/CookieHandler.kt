
package _4Tipsy.TinyCloudCLI.core

import io.ktor.client.plugins.api.*
import io.ktor.http.*

import kotlinx.serialization.Serializable
import net.peanuuutz.tomlkt.TomlComment
import net.peanuuutz.tomlkt.Toml
import kotlinx.serialization.decodeFromString


import java.util.Date
import java.text.DateFormat
import java.io.File
import java.nio.file.Files


// modules
import _4Tipsy.TinyCloudCLI.APP_LOC
import kotlinx.serialization.encodeToString




@Serializable
data class Cookie (
  val name: String,
  val value: String,
  val path: String,
  val expiresAt: String,
)

@Serializable
data class CookiesToml (
  @TomlComment("This file is autogenerated, on syntax error app will fall\nPlease do not edit!")
  val cookies: List<Cookie>
)



private fun _getCookiesToml(): File {
  val cookiesTomlFile = listOf(APP_LOC, "cookies.toml").joinToString(File.separator)
    .let { File(it) }
  // create if not exist
  if (!cookiesTomlFile.exists()) {
    println("Creating 'cookies.toml'")
    Files.writeString(
      cookiesTomlFile.toPath(),
      Toml.encodeToString( CookiesToml(emptyList<Cookie>()) )
    )
  }
  return cookiesTomlFile
}





val CookieHandler = createClientPlugin("CookieHandler") {

  onResponse { response ->
    // get cookies
    val resCookies = response.setCookie().map {
      Cookie (
        name = it.name,
        value = it.value,
        path = it.path ?: "/",
        expiresAt = Date( System.currentTimeMillis() + (it.maxAge * 1000) )
          .toGMTString()
      )
    }
    // save cookies
    val oldCookies = Toml.decodeFromString<CookiesToml>(_getCookiesToml().readText()).cookies
    var cookiesToSave = listOf<Cookie>( *resCookies.toTypedArray() )

    oldCookies.forEach { oc ->
      if ( resCookies.find { it.name == oc.name } == null ) {
        cookiesToSave = cookiesToSave.plus(oc)
      }
    }
    Files.writeString(
      _getCookiesToml().toPath(),
      Toml.encodeToString( CookiesToml(cookiesToSave) )
    )
  }

}




fun getCookiesAsHeader(path: String): String {
  var cookieList = Toml.decodeFromString<CookiesToml>(_getCookiesToml().readText()).cookies

  // filter with path
  cookieList = cookieList.filter { it.path.startsWith(path) }

  // expire
//  val now = Date(System.currentTimeMillis())
//  cookieList = cookieList.filter { Date(it.expiresAt).after(now) }
//  Files.writeString(
//    _getCookiesToml().toPath(),
//    Toml.encodeToString( CookiesToml(cookieList) )
//  )


  return cookieList
    .map { "${it.name}=${it.value};" }
    .let { it.joinToString(" ") }
}